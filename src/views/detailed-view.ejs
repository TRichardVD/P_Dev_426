<!DOCTYPE html>
<html lang="fr">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vue d√©taill√©e</title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
    <link rel="stylesheet" href="/css/detailed-view.css" />
    <link rel="stylesheet" href="/css/header-footer.css" />
      <script src="https://cesium.com/downloads/cesiumjs/releases/1.127/Build/Cesium/Cesium.js"></script>
    <link
      href="https://cesium.com/downloads/cesiumjs/releases/1.127/Build/Cesium/Widgets/widgets.css"
      rel="stylesheet"
    />
  </head>
  <body>
    <%- include('partials/header') %>
    
    <main>
      <h1><%= site.name %></h1>
      <div class="site-actions">
        <button id="like-site-btn" data-site-id="<%= site._id %>">
          ‚ù§Ô∏è <span id="site-likes-count"><%= site.likes || 0 %></span>
        </button>
      </div>

      <!--
      Si vous souhaitez g√©rer une galerie d‚Äôimages, d√©commentez la partie ci-dessous 
      et ins√©rez les images dans le tableau 'images'.

      <% const images = []; %>
      <% let selectedImage = "photo1.jpg"; %>

      <img
        id="selected-image"
        src="<%= selectedImage %>"
        alt="selected image"
      />
      <div class="image-gallery">
        <% images.forEach(image => { %>
        <img class="thumbnail" src="<%= image %>" alt="<%= image %>" />
        <% }); %>
      </div>
      -->

      <section class="history-section">
        <h2>Histoire</h2>
        <p><%= site.description %>.</p>
      </section>

      <section>
        <h2>Localisation</h2>
        <div id="cesiumContainer" style="height: 400px; width: 100%;"></div>
      </section>

      <section>
        <h2><%= site.comments.length || 0 %> Commentaires</h2>
        <div class="comment-section">
          <div class="comment new-comment">
            <img src="/images/profile-icon.png" alt="Your avatar" />
            <div class="comment-content">
              <form action="/api/site/<%= site._id %>/comment" method="post">
                <input type="text" name="comment" placeholder="Partagez votre avis..." required />
                <button type="submit">Publier</button>
              </form>
            </div>
          </div>
          
          <% site.comments.forEach(comment => { %>
          <div
            class="comment"
            id="comment-<%= comment._id %>"
            data-comment-id="<%= comment._id %>"
          >
            <img
              src="/images/profile-icon.png"
              alt="Avatar de <%= comment.user_username %>"
            />
            <div class="comment-content">
              <p class="username"><%= comment.user_username %></p>
              <p class="comment-text"><%= comment.comment %></p>
              <div class="like-dislike">
                <button class="like-btn" data-comment-id="<%= comment._id %>">
                  üëç <span class="like-count"><%= comment.likes || 0 %></span>
                </button>
                <button class="dislike-btn" data-comment-id="<%= comment._id %>">
                  üëé <span class="dislike-count"><%= comment.dislikes || 0 %></span>
                </button>
              </div>
            </div>
          </div>
          <% }); %>
        </div>
      </section>
    </main>

    <%- include('partials/footer') %>

    
    <script>
const pinBuilder = new Cesium.PinBuilder();
const viewer = new Cesium.Viewer('cesiumContainer', {
    timeline: false,
    animation: false,
});




async function init3dMap() {
  let i = 0;
    Cesium.Ion.defaultAccessToken =
        'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiI3NmI2ZDljYS0zYWM1LTRhMzktOGM4MC0zYzhmNGQ2YjNhZTYiLCJpZCI6Mjg4NzMwLCJpYXQiOjE3NDYxOTI0NzN9.eFzZGEIVPfubhi7owpQzIaroqHJ2dX8vAtbr-kteQnM';


        
    fetch('/api/site/sites')
        .then((response) => response.json())
        .then((data) => {
        const siteFound = data.find((site) => site.id === '<%= site._id %>');

        console.log(siteFound);

	      viewer.camera.flyTo({
            destination: Cesium.Cartesian3.fromDegrees(
                [siteFound.coordinates.coordinates[0]],
                [siteFound.coordinates.coordinates[1]],
                20000
            ),
        });


	data.forEach((site) => {
		const lat = site.coordinates.coordinates[1];
		const lon = site.coordinates.coordinates[0];
		const name = site.name;
		//const letter = name.charAt(0);
		const link = './api/site/' + site.id;
		let color;
		let marker;
		if (site.id === siteFound.id) {
      color = Cesium.Color.RED;
      marker = 'star-stroked';
    }
    else if (site.category == 'Cultural') {
			color = Cesium.Color.YELLOW;
			marker = 'museum';
		} else if (site.category == 'Natural') {
			color = Cesium.Color.GREEN;
			marker = 'park';
		} else {
			color = Cesium.Color.ROYALBLUE;
			marker = 'zoo';
		}

		//afficher sur la carte
	pinBuilder
		.fromMakiIconId(marker, color, 48)
		.then(function (canvas) {
			viewer.entities.add({
				name: name,
				description: `<b>${name}</b><br>cat√©gorie : ${site.category}</br><a href="${link}" target="_blank">Voir plus</a>`,
				position: Cesium.Cartesian3.fromDegrees(lon, lat),
				billboard: {
					image: canvas.toDataURL(),
					verticalOrigin: Cesium.VerticalOrigin.BOTTOM,
				},
			});
		});
	})
})
        .catch((error) =>
            console.error('Error loading or processing data:', error)
        );
}


      // function initMap() {
      //   // Initialiser la carte avec une vue par d√©faut
      //   var map = L.map("map").setView([0, 0], 2);

      //   // Ajouter le layer OpenStreetMap
      //   L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
      //     attribution:
      //       '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
      //   }).addTo(map);

      //   // V√©rifier si les coordonn√©es existent et sont valides
      //   const lat = "<%= site.coordinates.coordinates[0] %>";
      //   const lon = "<%= site.coordinates.coordinates[1] %>";

      //   if (lat && lon) {
      //     // Cr√©er un pop-up avec un lien cliquable (exemple minimal)
      //     const popupContent = `<b><%= site.name %></b>`;
      //     L.marker([lat, lon]).addTo(map).bindPopup(popupContent);
      //     map.setView([lat, lon], 13);
      //   } else {
      //     console.error("Les coordonn√©es ne sont pas valides.");
      //   }
      // }

      document.addEventListener("DOMContentLoaded", function () {
        init3dMap();
      });

      // Gestion Like/Dislike sur les commentaires
      document.addEventListener('DOMContentLoaded', function() {
        const handleVote = async (commentId, action) => {
          try {
            const response = await fetch(`/api/comment/${commentId}/${action}`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              }
            });

            if (!response.ok) {
              const error = await response.json();
              if (response.status === 401) {
                window.location.href = '/login';
                return;
              }
              throw new Error(error.message);
            }

            const data = await response.json();
            const comment = document.querySelector(`[data-comment-id="${commentId}"]`);
            comment.querySelector('.like-count').textContent = data.likes;
            comment.querySelector('.dislike-count').textContent = data.dislikes;
          } catch (error) {
            console.error('Error:', error);
            alert(error.message);
          }
        };

        document.querySelectorAll('.like-btn').forEach(button => {
          button.addEventListener('click', () => {
            handleVote(button.dataset.commentId, 'like');
          });
        });

        document.querySelectorAll('.dislike-btn').forEach(button => {
          button.addEventListener('click', () => {
            handleVote(button.dataset.commentId, 'dislike');
          });
        });
      });

      // Gestion du Like sur la page
      document.addEventListener('DOMContentLoaded', function() {
        const likeSiteBtn = document.getElementById('like-site-btn');
        if (likeSiteBtn) {
          likeSiteBtn.addEventListener('click', async () => {
            try {
              const response = await fetch(`/api/site/${likeSiteBtn.dataset.siteId}/like`, {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json'
                }
              });

              if (!response.ok) {
                const error = await response.json();
                if (response.status === 401) {
                  window.location.href = '/login';
                  return;
                }
                throw new Error(error.message);
              }

              const data = await response.json();
              document.getElementById('site-likes-count').textContent = data.likes;
            } catch (error) {
              console.error('Error:', error);
              alert(error.message);
            }
          });
        }
      });
    </script>
  </body>
</html>
